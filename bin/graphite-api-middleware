#!/usr/bin/env ruby
$:.unshift File.expand_path('../../lib',__FILE__)

require 'graphite-api'
require 'docopt'

options = GraphiteAPI::Client.default_options.merge interval: 60, pid: '/var/run/graphite-api-middleware.pid'

doc = <<DOCOPT
GraphiteAPI Middleware Server
Usage:
  #{__FILE__} <graphite-uri>...
              [-d | --daemonize]
              [-p=<port> | --port=<port>]
              [-l=<log-file> | --log-file=<log-file>]
              [-L=<log-level> | --log-level=<log-leve>]
              [-P=<pid-file> | --pid-file=<pid-file>]
              [-i=<interval> | --interval=<interval>]
              [-s=<slice> | --slice=<slice>]
              [-r=<reanimation> | --reanimation=<reanimation>]
              [-m=<aggregation-method> | --aggregation-method=<aggregation-method>]
  #{__FILE__} -v | --version
  #{__FILE__} -h | --help

Arguments:
  <graphite-uri> List of URIs (seperated by spaces) that point to graphite API servers [udp,tcp]:\/\/host:port

Options:
  -h, --help                                                         Show this screen.
  -v, --version                                                      Show version.
  -d, --daemonize                                                    Run as a daemon.
  -p=<port>, --port=<port>                                           Listening port for this server.
  -l=<log-file>, --log-file=<log-file>                               Listening port for this server.
  -L=<log-level>, --log-level=<log-level>                            Log level (defaults to warn).
  -P=<pid-file>, --pid-file=<pid-file>                               Path to the PID to use (defaults to #{options[:pid]}).
  -i=<interval>, --interval=<interval>                               The interval to wait between each report (defaults to #{options[:interval]}).
  -s=<slice>, --slice=<slice>                                        This middleware will send reports to graphite in slices of X seconds (defaults to #{options[:slice]}).
  -r=<reanimation>, --reanimation=<reanimation>                      Reanimate records that are younger than X hours, please see README.
  -m=<aggregation-method>, --aggregation-method=<aggregation-method> The aggregation method (sum, avg or replace) for multiple reports in the same time slice (defaults to #{options[:default_aggregation_method]}).

More Info @ https://github.com/kontera-technologies/graphite-api-middleware
DOCOPT

begin
  opts = Docopt::docopt(doc)

  if opts["--version"]
    puts "GraphiteAPI Middleware #{GraphiteAPI::Middleware::VERSION}"
  else
    raise "Invalid aggregation method. Valid values are sum, avg or replace." unless ["sum", "avg", "replace", nil].include? opts["--aggregation-method"]

    options[:backends] = opts["<graphite-uri>"]
    options[:port] = opts["--port"] if opts["--port"]
    options[:log_file] = File::expand_path opts["--log-file"] if opts["--log-file"]
    options[:log_level] = opts["--log-level"] if opts["--log-level"]
    options[:pid] = opts["<pid>"] if opts["<pid>"]
    options[:daemonize] = opts["--daemonize"]
    options[:interval] = opts["--interval"].to_i if opts["--interval"].to_i > 0
    options[:slice] = opts["--slice"].to_i if opts["--slice"].to_i > 0
    options[:cache] = opts["--cache"].to_i * 3600 if opts["--cache"].to_i > 0
    options[:default_aggregation_method] = opts["--aggregation-method"].to_sym if opts["--aggregation-method"]

    GraphiteAPI::Logger.init Hash[[:dev,:level].zip options.values_at(:log_file, :log_level) ]

    Process.daemon if options[:daemonize]
    GraphiteAPI::Middleware::Connection.start options
  end
rescue Docopt::Exit => e
  puts e.message
rescue Interrupt
  GraphiteAPI::Logger.info "Shutting down..."
  Zscheduler.stop
rescue Exception => e
  puts (Docopt::Exit.new e.message).message
end
